{
  "uid" : "320706f20593029e",
  "name" : "test_login_without_entering_email_and_password",
  "fullName" : "tests.test_Login.TestLogin#test_login_without_entering_email_and_password",
  "historyId" : "a147bfdee2ad00a7b64d255c3f53bf83",
  "time" : {
    "start" : 1720671469957,
    "stop" : 1720671469957,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EEB6EEA2+31554]\n\t(No symbol) [0x00007FF7EEAE7ED9]\n\t(No symbol) [0x00007FF7EE9A8559]\n\t(No symbol) [0x00007FF7EE993BE4]\n\t(No symbol) [0x00007FF7EE9E5E02]\n\t(No symbol) [0x00007FF7EE9DFCC8]\n\t(No symbol) [0x00007FF7EE9DBB3B]\n\t(No symbol) [0x00007FF7EEA28794]\n\t(No symbol) [0x00007FF7EEA27DF0]\n\t(No symbol) [0x00007FF7EEA1CDD3]\n\t(No symbol) [0x00007FF7EE9EA33B]\n\t(No symbol) [0x00007FF7EE9EAED1]\n\tGetHandleVerifier [0x00007FF7EEE78B1D+3217341]\n\tGetHandleVerifier [0x00007FF7EEEC5AE3+3532675]\n\tGetHandleVerifier [0x00007FF7EEEBB0E0+3489152]\n\tGetHandleVerifier [0x00007FF7EEC1E776+750614]\n\t(No symbol) [0x00007FF7EEAF375F]\n\t(No symbol) [0x00007FF7EEAEEB14]\n\t(No symbol) [0x00007FF7EEAEECA2]\n\t(No symbol) [0x00007FF7EEADE16F]\n\tBaseThreadInitThunk [0x00007FFFB950257D+29]\n\tRtlUserThreadStart [0x00007FFFBA34AF28+40]",
  "statusTrace" : "request = <SubRequest 'setup_and_teardown' for <Function test_login_without_entering_email_and_password>>\n\n    @pytest.fixture()\n    def setup_and_teardown(request):\n        browser = ReadConfigurations.read_configuration(\"basic info\", \"browser\")\n        global driver\n    \n        if browser.lower() == \"chrome\":\n>           driver = webdriver.Chrome()\n\ntests\\conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020353913A40>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom chrome not rea...07FF7EEADE16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFB950257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFFBA34AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from chrome not reachable\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7EEB6EEA2+31554]\nE       \t(No symbol) [0x00007FF7EEAE7ED9]\nE       \t(No symbol) [0x00007FF7EE9A8559]\nE       \t(No symbol) [0x00007FF7EE993BE4]\nE       \t(No symbol) [0x00007FF7EE9E5E02]\nE       \t(No symbol) [0x00007FF7EE9DFCC8]\nE       \t(No symbol) [0x00007FF7EE9DBB3B]\nE       \t(No symbol) [0x00007FF7EEA28794]\nE       \t(No symbol) [0x00007FF7EEA27DF0]\nE       \t(No symbol) [0x00007FF7EEA1CDD3]\nE       \t(No symbol) [0x00007FF7EE9EA33B]\nE       \t(No symbol) [0x00007FF7EE9EAED1]\nE       \tGetHandleVerifier [0x00007FF7EEE78B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF7EEEC5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF7EEEBB0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF7EEC1E776+750614]\nE       \t(No symbol) [0x00007FF7EEAF375F]\nE       \t(No symbol) [0x00007FF7EEAEEB14]\nE       \t(No symbol) [0x00007FF7EEAEECA2]\nE       \t(No symbol) [0x00007FF7EEADE16F]\nE       \tBaseThreadInitThunk [0x00007FFFB950257D+29]\nE       \tRtlUserThreadStart [0x00007FFFBA34AF28+40]\n\nC:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "setup_and_teardown",
    "time" : {
      "start" : 1720671469958,
      "stop" : 1720671534969,
      "duration" : 65011
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable\nStacktrace:\n\tGetHandleVerifier [0x00007FF7EEB6EEA2+31554]\n\t(No symbol) [0x00007FF7EEAE7ED9]\n\t(No symbol) [0x00007FF7EE9A8559]\n\t(No symbol) [0x00007FF7EE993BE4]\n\t(No symbol) [0x00007FF7EE9E5E02]\n\t(No symbol) [0x00007FF7EE9DFCC8]\n\t(No symbol) [0x00007FF7EE9DBB3B]\n\t(No symbol) [0x00007FF7EEA28794]\n\t(No symbol) [0x00007FF7EEA27DF0]\n\t(No symbol) [0x00007FF7EEA1CDD3]\n\t(No symbol) [0x00007FF7EE9EA33B]\n\t(No symbol) [0x00007FF7EE9EAED1]\n\tGetHandleVerifier [0x00007FF7EEE78B1D+3217341]\n\tGetHandleVerifier [0x00007FF7EEEC5AE3+3532675]\n\tGetHandleVerifier [0x00007FF7EEEBB0E0+3489152]\n\tGetHandleVerifier [0x00007FF7EEC1E776+750614]\n\t(No symbol) [0x00007FF7EEAF375F]\n\t(No symbol) [0x00007FF7EEAEEB14]\n\t(No symbol) [0x00007FF7EEAEECA2]\n\t(No symbol) [0x00007FF7EEADE16F]\n\tBaseThreadInitThunk [0x00007FFFB950257D+29]\n\tRtlUserThreadStart [0x00007FFFBA34AF28+40]\n\n",
    "statusTrace" : "  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1125, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 880, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Python\\python-workspace\\SeleniumPythonHybridFramework\\tests\\conftest.py\", line 33, in setup_and_teardown\n    driver = webdriver.Chrome()\n             ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\ROWTECH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  }, {
    "name" : "log_on_failure",
    "time" : {
      "start" : 1720671538753,
      "stop" : 1720671538753,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "log_on_failure::0",
    "time" : {
      "start" : 1720671541593,
      "stop" : 1720671541593,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_Login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-EQR9C0M"
  }, {
    "name" : "thread",
    "value" : "5956-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_Login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')" ]
  },
  "source" : "320706f20593029e.json",
  "parameterValues" : [ ]
}